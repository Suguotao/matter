--- a/ksdk_mbedtls.c
+++ b/ksdk_mbedtls.c
@@ -7,6 +7,8 @@
  * SPDX-License-Identifier: BSD-3-Clause
  */
 
+#include "SecLib.h"
+
 #if !defined(MBEDTLS_CONFIG_FILE)
 #include "mbedtls/config.h"
 #else
@@ -753,8 +755,7 @@ int mbedtls_internal_aes_encrypt(mbedtls_aes_context *ctx, const unsigned char i
     }
     CAU3_AES_Encrypt(CAU3, &s_cau3Handle, input, output);
 #elif defined(MBEDTLS_FREESCALE_LPC_AES)
-    AES_SetKey(AES_INSTANCE, key, ctx->nr);
-    AES_EncryptEcb(AES_INSTANCE, input, output, 16);
+    AES_128_Encrypt(input, key, output);
 #elif defined(MBEDTLS_FREESCALE_CAAM_AES)
     CAAM_AES_EncryptEcb(CAAM_INSTANCE, &s_caamHandle, input, output, 16, key, ctx->nr);
 #elif defined(MBEDTLS_FREESCALE_DCP_AES)
@@ -789,8 +790,7 @@ int mbedtls_internal_aes_decrypt(mbedtls_aes_context *ctx, const unsigned char i
     }
     CAU3_AES_Decrypt(CAU3, &s_cau3Handle, input, output);
 #elif defined(MBEDTLS_FREESCALE_LPC_AES)
-    AES_SetKey(AES_INSTANCE, key, ctx->nr);
-    AES_DecryptEcb(AES_INSTANCE, input, output, 16);
+    AES_128_Decrypt(input, key, output);
 #elif defined(MBEDTLS_FREESCALE_CAAM_AES)
     CAAM_AES_DecryptEcb(CAAM_INSTANCE, &s_caamHandle, input, output, 16, key, ctx->nr);
 #elif defined(MBEDTLS_FREESCALE_DCP_AES)
@@ -854,18 +854,17 @@ int mbedtls_aes_crypt_cbc(mbedtls_aes_context *ctx,
 
     key = (uint8_t *)ctx->rk;
     keySize = (size_t)ctx->nr;
-    AES_SetKey(AES_INSTANCE, key, keySize);
 
     if (mode == MBEDTLS_AES_DECRYPT)
     {
         uint8_t tmp[16];
         memcpy(tmp, input + length - 16, 16);
-        AES_DecryptCbc(AES_INSTANCE, tmp, output, length, iv);
+        AES_128_CBC_Decrypt_And_Depad(tmp, length, iv, key, output);
         memcpy(iv, tmp, 16);
     }
     else
     {
-        AES_EncryptCbc(AES_INSTANCE, input, output, length, iv);
+        AES_128_CBC_Encrypt(input, length, iv, key, output);
         memcpy(iv, output + length - 16, 16);
     }
 
@@ -1047,8 +1046,7 @@ int mbedtls_aes_crypt_ctr(mbedtls_aes_context *ctx,
     key = (uint8_t *)ctx->rk;
     keySize = (size_t)ctx->nr;
 
-    AES_SetKey(AES_INSTANCE, key, keySize);
-    AES_CryptCtr(AES_INSTANCE, input, output, length, nonce_counter, stream_block, nc_off);
+    AES_128_CTR(input, length, nonce_counter, key, output);
 
     return (0);
 }
@@ -4070,26 +4068,18 @@ void mbedtls_sha256_clone(mbedtls_sha256_context *dst, const mbedtls_sha256_cont
  */
 int mbedtls_sha256_starts_ret(mbedtls_sha256_context *ctx, int is224)
 {
-    status_t ret = kStatus_Fail;
+    int status = MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED;
     if (!is224) /* SHA-224 not supported */
     {
-        ret = SHA_Init(SHA_INSTANCE, ctx, kSHA_Sha256);
-    }
-    if (ret != kStatus_Success)
-    {
-        return MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED;
+        SHA256_Init(ctx);
+        status = 0;
     }
-    return 0;
+    return status;
 }
 
 int mbedtls_internal_sha256_process(mbedtls_sha256_context *ctx, const unsigned char data[64])
 {
-    status_t ret = kStatus_Fail;
-    ret = SHA_Update(SHA_INSTANCE, ctx, data, 64);
-    if (ret != kStatus_Success)
-    {
-        return MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED;
-    }
+    SHA256_HashUpdate(ctx, data, 64);
     return 0;
 }
 
@@ -4098,12 +4088,8 @@ int mbedtls_internal_sha256_process(mbedtls_sha256_context *ctx, const unsigned
  */
 int mbedtls_sha256_update_ret(mbedtls_sha256_context *ctx, const unsigned char *input, size_t ilen)
 {
-    status_t ret = kStatus_Fail;
-    ret = SHA_Update(SHA_INSTANCE, ctx, input, ilen);
-    if (ret != kStatus_Success)
-    {
-        return MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED;
-    }
+    SHA256_HashUpdate(ctx, input, ilen);
+
     return 0;
 }
 
@@ -4112,13 +4098,7 @@ int mbedtls_sha256_update_ret(mbedtls_sha256_context *ctx, const unsigned char *
  */
 int mbedtls_sha256_finish_ret(mbedtls_sha256_context *ctx, unsigned char output[32])
 {
-    size_t outputSize = 32u;
-    status_t ret = kStatus_Fail;
-    ret = SHA_Finish(SHA_INSTANCE, ctx, output, &outputSize);
-    if (ret != kStatus_Success)
-    {
-        return MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED;
-    }
+    SHA256_HashFinish(ctx, output);
     return 0;
 }
